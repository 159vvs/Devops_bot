- name: Download packages
  hosts: all
  become: yes
  tasks:
  - name: download packages
    apt:
      pkg:
      - git
      - postgresql
      - postgresql-contrib
      - libpq-dev
      update_cache: yes

- name: Deployment host1
  hosts: host1
  become: yes
  tasks:
  - name: download packages
    apt:
      pkg:
      - python3
      - python3-pip

  - name: clone git repo
    git:
      repo: "{{ hostvars[inventory_hostname]['GIT'] }}"
      dest: "{{ hostvars[inventory_hostname]['WORKDIR'] }}"

  - name: install requirements
    pip:
      requirements: "{{ hostvars[inventory_hostname]['WORKDIR'] }}/requirements.txt"

  - name: Find all directories inside /etc/postgresql/
    find:
      paths: "/etc/postgresql/"
      file_type: directory
    register: postgres_dirs

  - name: Add full path to PostgreSQL directories
    set_fact:
      postgres_dirs_with_full_path: "{{ postgres_dirs.files | map(attribute='path') | join }}"

  - name: Change postgresql.conf
    blockinfile:
      path: "{{ postgres_dirs_with_full_path }}/main/postgresql.conf"
      block: |
        listen_addresses = '*'
        password_encryption ='scram-sha-256'
        port = {{ hostvars[inventory_hostname]['DB_PORT'] }}
        max_wal_senders=10
        wal_level=replica
        hot_standby=on
        max_replication_slots=10
        hot_standby_feedback=on
        log_replication_commands=on
        log_directory='/var/log/postgresql'
        log_filename='postgres.log'
        logging_collector=on

  - name: applying changes
    service:
      name: postgresql
      state: restarted


  - name: init.sql to host1
    copy:
      src: init.sql
      dest: /tmp/init.sql

  - name: change owner
    command: chown postgres:postgres /tmp/init.sql

  - name: replace DB_DATABASE name
    replace:
      path: /tmp/init.sql
      regexp: "DB_DATABASE"
      replace: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"

  - name: replace DB_USER name
    replace:
      path: /tmp/init.sql
      regexp: "DB_USER"
      replace: "{{ hostvars[inventory_hostname]['DB_USER'] }}"

  - name: replace DB_PASSWORD name
    replace:
      path: /tmp/init.sql
      regexp: "DB_PASSWORD"
      replace: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"

  - name: replace DB_REPL_USER name
    replace:
      path: /tmp/init.sql
      regexp: "DB_REPL_USER"
      replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"

  - name: replace DB_REPL_PASSWORD name
    replace:
      path: /tmp/init.sql
      regexp: "DB_REPL_PASSWORD"
      replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

  - name: run init.sql
    command: /usr/bin/psql -a -f /tmp/init.sql
    become: true
    become_user: postgres

  - name: pg_hba.conf to host1
    copy:
      src: pg_hba.conf
      dest: "{{ postgres_dirs_with_full_path }}/main/pg_hba.conf"

  - name: applying changes
    service:
      name: postgresql
      state: restarted

- name: Deployment host2
  hosts: host2
  become: true
  tasks:

  - name: Find all directories inside /etc/postgresql/
    find:
      paths: "/etc/postgresql/"
      file_type: directory
    register: postgres_dirs

  - name: Add full path to PostgreSQL directories
    set_fact:
      postgres_dirs_with_full_path: "{{ postgres_dirs.files | map(attribute='path') | join }}"

  - name: change postgresql.conf
    become: true
    become_user: postgres
    blockinfile:
      path: "{{ postgres_dirs_with_full_path }}/main/postgresql.conf"
      block: |
        listen_addresses = '*'
        port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}

  - name: Find all directories inside /var/lib/postgresql/
    find:
      paths: "/var/lib/postgresql"
      file_type: directory
    register: postgres_dirs

  - name: Add full path to PostgreSQL directories
    set_fact:
      postgres_dirs_with_full_path: "{{ postgres_dirs.files | map(attribute='path') | join }}"

  - name: remove database data
    command: "rm -rf {{ postgres_dirs_with_full_path }}/main"

  - name: do backup from host1
    command: pg_basebackup -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -D "{{ postgres_dirs_with_full_path }}/main/" -R --slot=replication_slot -p {{ hostvars[inventory_hostname]['DB_PORT'] }}
    environment:
      PGUSER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
      PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

  - name: change rights
    command: chown -R postgres:postgres /var/lib/postgresql/

  - name: applying slave changes
    service:
      name: postgresql
      state: restarted

- name: start project
  hosts: host1
  become: yes
  tasks:
  - name: start bot
    command: python3 "{{ hostvars[inventory_hostname]['WORKDIR'] }}/bot.py"
    environment:
      RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
      RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
      RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
      RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
      DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
      DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
      DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
      DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
      DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
      DB_REPL_HOST: "{{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}"
      DB_REPL_USER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
      DB_REPL_PASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
      DB_REPL_PORT: "{{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}"
      TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
